// Observer:
public interface MyObserver {
   void update();
}
public TheLibrary {
    ￼ArrayList<MyObserver> observers; // intialized in contructor. 
    ￼public void registerObserver(MyObserver o) {
         observers.add(o);
    }
    ￼￼private void notifyObservers() {
       for (MyObserver o : observers) o.update();
    }
}
public MyProgram implements MyObserver {
    public void update() {
        // do what is required when informed of an event.
    }
    ￼lib = new TheLibrary();
    lib.registerObserver(this);
}
// Decorator:
public interface BaseComponentInterface
public class BaseComponent1 implements BaseComponentInterface
public class BaseComponent2 implements BaseComponentInterface
public class BaseComponent3 implements BaseComponentInterface
public abstract class Decorator implements BaseComponentInterface {
    private BaseComponentInterface bci;
}
public class ConcreteDecorator1 extends Decorator {
public ConcreteDecorator1(BaseComponentInterface bci) {
        super(bci);
    }
    public void show() {
        super.show();
        this.doStuff();
    }
    private void doStuff() {
        System.out.println("con-dec1");
    }
}
public class ConcreteDecorator2 extends Decorator
public class ConcreteDecorator3 extends Decorator
in main(): {
Decorator decorator = new ConcreteDecorator2(new ConcreteDecorator1(
                new ConcreteDecorator3(new BaseComponent1())));
        decorator.show();
}

